ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape=cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape=fl))
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = displ < 5)))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
mpg
ggplot(data=mpg) + geom_point(mapping= aes(x=cyl, y=cty)) + facet_wrap(~ manufacturer)
ggplot(data=mpg) + geom_point(mapping= aes(x=cyl, y=cty)) + facet_wrap(~ manufacturer, nrow=3)
ggplot(data=mpg) + geom_point(mapping= aes(x=cyl, y=cty)) + facet_grid(manufacturer ~ class)
ggplot(data=mpg) + geom_point(mapping= aes(x=cyl, y=cty)) + facet_wrap(~ displ, nrow=3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ drv .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ )
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid( cyl ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
?facet_wrap
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data= mpg) + geom_smooth(mapping = aes(x=displ, y=hwy, linetype=cty))
ggplot(data= mpg) + geom_smooth(mapping = aes(x=displ, y=hwy, linetype=class))
ggplot(data= mpg) + geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))
ggplot(data= mpg) + geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv)) + geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data= mpg) + geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv)) + geom_point(mapping = aes(x=displ, y=hwy, color=drv))
ggplot(data=mpg, mapping=(aes=x=displ, y=hwy)) + geom_smooth() + geom_point()
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_smooth() + geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping = aes(shape=drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping = aes(linetype=drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE)
?show.legend()
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE, group=drv)
ggplot(data=mpg, mapping=aes(x=displ, y=hwy),
show.legend = FALSE) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE, group=drv)
ggplot(data=mpg, mapping=aes(x=displ, y=hwy),
show.legend = FALSE) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE)
ggplot(data=mpg, mapping=aes(x=displ, y=hwy),
show.legend = FALSE) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE, mapping=(group = drv))
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE,
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE)
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE)
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE, mapping = aes(group=drv))
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class)) + geom_smooth(se=FALSE, mapping = aes(group=drv, color=drv))
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class, color=drv)) + geom_smooth(se=FALSE, mapping = aes(group=drv))
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class, color=drv)) + geom_smooth(se=FALSE)
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(size=class, color=drv)) + geom_smooth(se=FALSE, mapping=aes(linetype=drv))
ggplot(data=mpg, mapping=aes(x=displ, y=hwy, stroke=5)) + geom_point(mapping=aes(size=class, color=drv)) + geom_smooth(se=FALSE, mapping=aes(linetype=drv))
ggplot(data=mpg, mapping=aes(x=displ, y=hwy, stroke=10)) + geom_point(mapping=aes(size=class, color=drv)) + geom_smooth(se=FALSE, mapping=aes(linetype=drv))
?geom_point
ggplot(data=mpg, mapping=aes(x=displ, y=hwy, stroke=10, fill = "white")) + geom_point(mapping=aes(size=class, color=drv)) + geom_smooth(se=FALSE, mapping=aes(linetype=drv))
library(tidyverse)
seq(1,20)
seq(3,20)
?seq
seq(3,20,3)
library(tidyverse)
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(dota = mpg) +
geom_point(mapping = aes(x = disp, y = hwy))
mpg
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
library(nycflights13)
flights
filter(flights, dep_time=517)
filter(flights, dep_time == 517)
filtered <- filter(flights, month=1, year=2012)
filtered <- filter(flights, month == 1, year == 2012)
filtered
view(filtered)
filtered <- filter(flights, month == 1, year == 2014)
filtered
filtered <- filter(flights, month == 1, year == 2013)
filtered
sqrt(2) ^ 2 == 4
sqrt(2)
1 / 49 * 49 == 1
near(1 / 49 * 49 == 1)
near(1 / 49 * 49, 1)
nov_dec <- filter(flights, month %in% c(11, 12))
september_octo_nov <- filter(flights, month %in% c(9,10,11))
september_octo_nov
is.na(flights)
delay_two_or_more <- filter(flights, arr_delay >= 2)
delay_two_or_more
?flights
to_huston <- filter(flights, dest == IAH | dest == HOU)
to_huston <- filter(flights, dest == "IAH" | dest == "HOU")
to_huston
to_huston[dest]
summer <- filter(flights, month %in% c(7,8,9))
summer
filter(flights, dep_delay == 0)
two_hours_late_departed_on_time <- filter(flights, dep_delay == 0 & arr_delay > 2)
two_hours_late_departed_on_time
delayed_an_hour_made_up_over_30_mins <- filter(flights, dep_delay >= 1 & arr_delay = (dep_delay - 0.5))
delayed_an_hour_made_up_over_30_mins <- filter(flights, dep_delay >= 1 & (arr_delay == dep_delay - 0.5))
delayed_an_hour_made_up_over_30_mins
?between
library(nycflights13)
library(tidyverse)
filter(flights, arr_delay > 2)
filter(flights, arr_delay >= 2)
?flights
filter(flights, dest == "IAH")
filter(flights, origin == "IAH")
filter(flights, origin == "EWR")
filter(flights, dest == "IAH" | dest == "HOU")
airlines
filter(flights, carrier %in% c(UA, AA, DL))
filter(flights, carrier %in% c("UA", "AA", "DL"))
filter(flights, month %in% c(7,8,9))
filter(flights, dep_delay < 0)
filter(flights, dep_delay <= 0, arr_delay > 2)
filter(flights, dep_delay >= 0.5, sched_arr_time + arr_delay < sched_arr_time + dep_delay)
filter(flights, dep_time == 000)
filter(flights, dep_time == 12)
?between
filter(flights, between(month, 7,9))
filter(flights, between(origin, "JFK", "LGA"))
filter(flights, is.na(dep_time))
arrange(flights, is.na(day))
arrange(flights, is.na(dep_time))
arrange(flights, desc(is.na(dep_time))
arrange(flights, desc(is.na(dep_time)))
is.na(flights)
arrange(flights, is.na(flights))
arrange(flights, desc(is.na(dep_delay)))
arrange(flights, desc(is.na(dep_delay)), asc(carrier))
arrange(flights, desc(is.na(dep_delay)), carrier)
arrange(flights, desc(is.na(dep_delay)), desc(carrier)
)
arrange(flights, desc(dep_delay), arr_delay(dep_delay))
arrange(flights, desc(dep_delay), desc(arr_delay))
arrange(flights, asc(dep_delay))
arrange(flights, dep_delay)
?flights
arrange(flights, dest, air_time)
options(pillar.print_max = Inf)
arrange(flights, dest, air_time)
options(pillar.print_max = 10)
arrange(flights, dest, air_time)
fastest = arrange(flights, dest, air_time)
View(fastest)
fastest = arrange(flights, origin, dest, air_time)
arrange(flights, distance)
arrange(flights, desc(distance))
select(flights, dep_time, dep_delay, arr_delay, arr_time)
select(flights, starts_with("dep"), starts_with("arr"))
select(flights, starts_with("dep") | starts_with("arr"))
select(flights, ends_with("delay") | ends_with("time"))
select(flights, contains("dep") | contains("arr"))
select(flights, dep_time, dep_time)
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
vars
any_of(vars)
?any_of
?any_of()
select(any_of(vars))
select(flights, any_of(vars))
vars <- c("year", "month", "day", "dep_delay", "arr_delay", "miaou")
select(flights, any_of(vars))
select(flights, all_of(vars))
select(flights, contains("TIME"))
?contains
select(flights, contains("TIME", ignore.case = FALSE))
select(flights, contains("time", ignore.case = FALSE))
214/100
214 %/% 100
214 %% 100
select(flights, dep_time, sched_dep_time)
515 %60
515 %% 60
515 / 60
515 / 100
515 // 100
515 %/% 100
mutate(flights, dep_time_since_midnight = dep_time %/% 100 + (dep_time %% 100))
mutated_midnight = mutate(flights, dep_time_since_midnight = dep_time %/% 100 + (dep_time %% 100))
View(mutated_midnight)
mutated_midnight = mutate(flights, dep_time_since_midnight = (dep_time %/% 100) * 60 + (dep_time %% 100))
mutated_midnight = mutate(flights, arr_time_exp = arr_time - dep_time)
select(mutated_midnight, arr_time_exp, air_time)
select(mutated_midnight, dep_time, sched_dep_time, dep_delay)
select(mutated_midnight, 1:3 + 1:10)
2+3/5
2.4+3/5-17
2+2
exp(-2)
log(14)+sin(3.1)*sqrt(2)/log10(3)
simple_fun <- function(num1) {
return (num1 * 2) + 15
}
simple_fun(15)
return num1 * 2 + 15
return (num1 * 2 + 15)
simple_fun <- function(num1) {
return (num1 * 2 + 15)
}
simple_fun(15)
getwd()
?rnorm
random_normal_distribution <- rnorm(100, 5, 2)
random_normal_distribution
ggplot(random_normal_distribution) + geom_histogram(fill="grey60")
library(tidyverse)
ggplot(random_normal_distribution) + geom_histogram(fill="grey60")
ggplot(random_normal_distribution) + geom_histogram(fill="grey60")
ggplot(data.frame(x = random_normal_distribution)) +aes(x) + geom_histogram(fill="grey60")
000, 5, 2)
# 100 iid random variables from a nor- mal distribution with mean 5 and standard deviation 2.
random_normal_distribution <- rnorm(1000, 5, 2)
ggplot(data.frame(x = random_normal_distribution)) +aes(x) + geom_histogram(fill="grey60")
ggplot(data.frame(x = random_normal_distribution)) +aes(x) + geom_histogram(fill="grey60", bins = 50)
quantile(random_normal_distribution, 0.95)
library(tidyverse)
# 100 iid random variables from a nor- mal distribution with mean 5 and standard deviation 2.
random_normal_distribution <- rnorm(1000, 5, 2)
ggplot(data.frame(x = random_normal_distribution)) +aes(x) + geom_histogram(fill="grey60", bins = 50)
# 0.95th quantile of the random distribution.
quantile(random_normal_distribution, 0.95)
pbinom(q=20, size=50, prob=0.3)
?pbinom
pbinom(x=20, size=50, prob=0.3)
pbinom(x=20, size=50, prob=0.3)
dbinom(x=20, size=50, prob=0.3)
dpois(x=2, lambda=5)
dpois(3,2)
plot(dpois(0:100, 2))
plot(dpois(0:100, 2), type="l")
var(plot(dpois(0:100000, 2), type="l"))
var(dpois(0:1000000, 2))
rpois(0:4, 2)
# B)
rpois(1:4, 2)
# B)
mean(rpois(1:4, 2))
# B)
mean(rpois(1:4, 2))
mean(rpois(1:4, 2))
# B)
mean(rpois(4, 2))
vector_samples <- NULL
for(x in 1:1000000) {
vector_samples <- c(vector ,mean(rpois(4, 2)))
}
vector_samples
vector_samples <- NULL
for(x in 1:1000000) {
vector_samples <- c(vector_samples ,mean(rpois(4, 2)))
}
?hist
hist(vector_samples, breaks=50, prob=T)
mean(vector_samples)
var(vector_samples)
set.seed(0)
vector_samples <- NULL
for(x in 1:100000000) {
vector_samples <- c(vector_samples ,mean(rpois(4, 2)))
}
set.seed(0)
vector_samples <- NULL
for(x in 1:10000000) {
vector_samples <- c(vector_samples ,mean(rpois(4, 2)))
}
for(x in 1:1000000) {
vector_samples <- c(vector_samples ,mean(rpois(10, 2)))
}
for(x in 1:1000000) {
vector_samples <- c(vector_samples ,mean(rpois(10, 2)))
}
vector_samples <- NULL
for(x in 1:1000000) {
vector_samples <- c(vector_samples ,mean(rpois(10, 2)))
}
# Initialise required packages.
required_packages <- c('tidyverse', 'readxl', 'lubridate', 'lemon')
# Install and load required packages.
for (p in required_packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
# Set working directory - please CHANGE ACCORDINGLY.
setwd(
"/Users/rafaelkoll/Desktop/4/Masters/c/Course/ADA/Practical/Breast-cancer-incidence-analysis"
)
##### POPULATION ESTIMATES AND EUROPEAN STANDARD POPULATION ####
# Read in the population estimates files for East Anglia for the 2004-2017 and 1971-2003
# periods. Then combine the two using bind_rows, and finally filter the
# result to include data from 1980 until 2017, and only female (sex=2).
pop_8017 <-
read_csv("./Data/pop_ea_200417.csv") %>% bind_rows(readr::read_table(
"./Data/population.txt",
col_names = c("year", "sex", "age", "population"),
skip = 5
)) %>% filter(year >= 1980, sex == 2)
# Read in European standard population
european_standard <-
read_excel("./Data/european-standard-pop.xlsx") %>% rename(age = ageband)
##### CASES IN OUR POPULATION ####
# Load age-specific breast cancer incidence of our population. Include everything except
# first and last columns.
cases_0417 <- read_excel("./Data/brca_incidence_2004_17.xlsx",
skip = 3,
n_max = 19) %>% select(everything(), -1, -last_col())
# Add the numbers in the last row (90+ label) with the numbers in the previous to last (85-89 label)
# since our age bands in the standard population are 1-18, with the 18th including everyone 85+.
age_90_over <- as.numeric(as.vector(cases_0417[18, ]))
cases_0417[18, ] <- cases_0417[18, ] + age_90_over
# After merging, drop the last column (over 90) -> since the data is now on the column for 85+.
cases_0417 <- cases_0417[1:18, ]
# Convert the wide table to longer.
cases_0417 <-
cases_0417 %>% pivot_longer(
cols = 1:ncol(cases_0417),
names_to = "year",
values_to = "cases"
) %>% arrange(year)
# Enter age band for each year. Creates an array from 1 to 18,
# repeats it n times. n = length of unique years in the dataset.
cases_0417["age"] <-
rep(c(1:18), times = length(unique(cases_0417$year)))
# Convert year from chr to int.
cases_0417 <- cases_0417 %>% mutate(year = as.integer(year))
# Read in the incidence rate for 1980 until 2003.
cases_8003 <-
read.csv("./Data/tumour.tsv", sep = '\t') %>% mutate(date_of_diagnosis = dmy(date_of_diagnosis))
# Only keep the first date of diagnosis for each patient -> on later tumours they must be considered as prevalence and not incidence.
cases_8003 <-
cases_8003 %>% group_by(patient_number) %>% summarise(date_of_diagnosis = min(date_of_diagnosis))
# Put the age band in the cases_8003 dataframe.
patient <-
read_csv("./Data/patient.csv") %>% mutate(date_of_birth = dmy(date_of_birth))
# Merge the patient and cases_8003 dataframe. Get their age at diagnosis.
cases_8003 <-
merge(patient, cases_8003, by = "patient_number") %>% mutate(age_diagnosed = as.integer(interval(date_of_birth, date_of_diagnosis) / years(1)))
# Get age group of patient.
cases_8003 <- cases_8003 %>%
mutate(age = cut(
age_diagnosed,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, Inf),
labels = FALSE,
right = FALSE
))
# Get the year (e.g. 1980) from the date of diagnosis.
cases_8003 <-
cases_8003 %>% mutate(year = as.numeric(format(date_of_diagnosis, '%Y')))
# Get cases number for each age band and each year by summarising.
cases_8003 <-
cases_8003 %>% group_by(year, age) %>% summarise(cases = n())
# Combine cases from 80-17.
cases_combined <-
base::rbind(cases_8003, cases_0417) %>% arrange(year, age)
# Combine the cases and population file using full join.
# Replace the NA values introduced (e.g. when there are no recorded cases for an age group in a year) with 0.
combined_cases_population <-
full_join(cases_combined, pop_8017, by = c("year", "age")) %>% replace(is.na(.), 0)
#### PART 1: YEARLY INCIDENCE RATE FROM 1980 TO 2017 ####
# Combine cases and population
combined_cases_population_part1 <-
combined_cases_population %>% mutate(crude_rate = (cases / population) * 100000)
# Calculate age distribution proportions on standard population.
european_standard <-
european_standard %>% mutate(age_distribution_proportions = europop / sum(europop))
# Combine the combined_cases_population_part1 dataframe with the european_standard.
combined_cases_population_part1 <-
left_join(combined_cases_population_part1, european_standard, by = "age")
# Calculate expected incidence.
combined_cases_population_part1 <-
combined_cases_population_part1 %>% mutate(expected_incidence = crude_rate *
age_distribution_proportions)
# Calculate direct age standardised death rate (dasdr), standard error,
# and the lower and upper 95 confidence intervals.
dasdr_final_table <-
combined_cases_population_part1 %>% group_by(year) %>% summarise(
dasdr = sum(expected_incidence),
standard_error = sqrt(sum(((
europop / 100000
) ^ 2) * (
cases / (population ^ 2)
))) * 100000,
lower_95_CI = dasdr - 1.96 * (standard_error),
upper_95_CI = dasdr + 1.96 * (standard_error)
)
# Drop the standard error before exporting the table (the exercise only asks for
# incidence rate and the confidence intervals).
dasdr_final_table <-
dasdr_final_table %>% select(everything(),-standard_error)
# Round the columns to two decimal places.
dasdr_final_table <-
dasdr_final_table %>% mutate_if(is.numeric, round, digits = 2)
# Create my own theme - to be used in all the plots I will generate.
my_theme <- theme (
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle=45, hjust=1),
axis.text.y = element_text(size = 14),
plot.title = element_text(hjust = 0.5),
)
# TODO: add a bit of border on top.
# Line plot with confidence intervals
plot_breast_cancer_incidence <-
ggplot(dasdr_final_table, aes(year, dasdr)) +
# Remove x-axis line and ticks
geom_line(col = 'red') +
geom_point(
colour = 'red',
fill = 'red',
size = 2,
shape = 22
) +
geom_ribbon(aes(ymin = lower_95_CI, ymax = upper_95_CI), alpha = 0.1) + labs(x = "Year",  y = "Age-standardised incidence rate \n (100,000 person years)") + scale_x_continuous(breaks = seq(1980, 2017, by = 5)) + scale_y_continuous(breaks = seq(0, 200, by = 10), limits =
c(0, NA), expand = c(0, 0)) + ggtitle("Female breast cancer incidence in East Anglia (1980 to 2017)") + theme_bw() + my_theme
plot_breast_cancer_incidence
# ALTERNATIVE 1: change in confidence intervals visualisation.
plot_breast_cancer_incidence_alt1 <-
ggplot(dasdr_final_table, aes(year, dasdr)) +
geom_errorbar(aes(ymin = lower_95_CI, ymax = upper_95_CI), colour = "grey65") +
geom_line(colour = "red") +
geom_point(
colour = "red",
fill = "red",
size = 2,
shape = 22
) + labs(x = "Year",  y = "Age-standardised incidence rate \n (100,000 person years)") + scale_x_continuous(breaks = seq(1980, 2017, by = 5)) + scale_y_continuous(breaks = seq(0, 200, by = 10), limits =
c(0, NA), expand = c(0, 10)) + ggtitle("Female breast cancer incidence in East Anglia (1980 to 2017)") + theme_bw() + my_theme
plot_breast_cancer_incidence_alt1
# ALTERNATIVE 2: Bar plots with condfidence intervals.
plot_breast_cancer_incidence_alt2 <-
ggplot(dasdr_final_table, aes(year, dasdr)) +
geom_bar(fill = "red",  stat = "identity", alpha = 0.7) +
geom_errorbar(aes(ymin = lower_95_CI, ymax = upper_95_CI), colour = "grey30") +
labs(x = "Year",  y = "Age-standardised incidence rate \n (100,000 person years)") + scale_x_continuous(breaks = seq(1980, 2017, by = 5)) + scale_y_continuous(breaks = seq(0, 200, by = 10), limits =  c(0, NA), expand = c(0, 10)) + ggtitle("Female breast cancer incidence in East Anglia (1980 to 2017)") + theme_bw() + my_theme
plot_breast_cancer_incidence_alt2
#### PART 2 ####
# Create new age groups for the age groups 20-49, 50-69, 70+.
# If between the age of 20-49 that means they are currently in the 5-10 age groups. Assign them to new_age_gp = 1.
# If between the age of 50-69 that means they are currently in the 11-14 age groups. Assign them to new_age_gp = 2.
# If between the age of 70+ that means they are currently in the 15-18 age groups. Assign them to new_age_gp = 3.
combined_cases_population_part2 <-
combined_cases_population %>% mutate(new_age_gp = case_when(
between(age, 1, 4) ~ '<20',
between(age, 5, 10) ~ '20-49',
between(age, 11, 14) ~ '50-69',
between(age, 15, 18) ~ '70+'
)) %>% filter(new_age_gp != '<20') %>% select(everything(), -age)
# Group by year and new_age_gp. Summarise cases and population. Calculate age specific incidence rate for each year.
final_table_part2 <-
combined_cases_population_part2  %>%  group_by(year, new_age_gp) %>% summarise(cases = sum(cases), population = sum(population)) %>% mutate(incidence = (cases / population) * 100000)
# Round the columns to two decimal places.
final_table_part2 <-
final_table_part2 %>% mutate_if(is.numeric, round, digits = 2)
# Scatter plot for age specific incidence (part 2).
ggplot(final_table_part2, aes(x=year, y=incidence, color=new_age_gp, shape=new_age_gp)) + geom_point() +
labs(x = "Year",  y = "Incidence") + scale_x_continuous(breaks = seq(1980, 2017, by = 5)) + scale_y_continuous(breaks = seq(0, 500, by = 50), limits =  c(0, NA)) + ggtitle("Age specific female breast cancer incidence (1980 to 2017)") + my_theme + scale_colour_discrete(name="Age group", labels=c("20-49","50-69","70+")) + scale_shape_discrete(name="Age group", labels=c("20-49","50-69","70+"))
